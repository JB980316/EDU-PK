# -*- coding: utf-8 -*-
"""EDU-PK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZQfW040HahTsU-NkHMkxnehEWX4e95Zg
"""

# Pharmacokinetics Modeling Application (Streamlit-based: Single and Multiple Dosing Models)

import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
from scipy.integrate import odeint, simpson

# ====== Common Functions ======
def create_time_vector(duration, dt=0.1):
    return np.arange(0, duration + dt, dt)

def simulate_ode(time, tau, n_doses, ode_func, y0, params, repeat=False):
    full_result = np.zeros((len(time), len(y0)))
    y = y0.copy()

    if repeat:
        for i in range(n_doses):
            t_start = i * tau
            t_end = time[-1] if i == n_doses - 1 else (i + 1) * tau
            mask = (time >= t_start) & (time < t_end)
            t_segment = time[mask] - t_start
            if i > 0:
                y[0] += params['dose']
            result = odeint(ode_func, y, t_segment, args=(params,))
            full_result[mask] = result
            y = result[-1]
    else:
        result = odeint(ode_func, y0, time, args=(params,))
        full_result = result

    return full_result

# ====== Model Definitions ======
def one_compartment_iv_ode(y, t, p):
    A = y[0]
    dA_dt = -p['kel'] * A
    return [dA_dt]

def one_compartment_po_ode(y, t, p):
    Ag, A = y
    dAg_dt = -p['ka'] * Ag
    dA_dt = p['ka'] * Ag - p['kel'] * A
    return [dAg_dt, dA_dt]

def one_compartment_infusion_ode(y, t, p):
    A = y[0]
    k0 = p['dose'] / p['infusion_time'] if t <= p['infusion_time'] else 0
    dA_dt = k0 - p['kel'] * A
    return [dA_dt]

def two_compartment_iv_ode(y, t, p):
    A1, A2 = y
    dA1dt = -p['k10'] * A1 - p['k12'] * A1 + p['k21'] * A2
    dA2dt = p['k12'] * A1 - p['k21'] * A2
    return [dA1dt, dA2dt]

def two_compartment_po_ode(y, t, p):
    Ag, A1, A2 = y
    dAgdt = -p['ka'] * Ag
    dA1dt = p['ka'] * Ag - p['k10'] * A1 - p['k12'] * A1 + p['k21'] * A2
    dA2dt = p['k12'] * A1 - p['k21'] * A2
    return [dAgdt, dA1dt, dA2dt]

def two_compartment_infusion_ode(y, t, p):
    A1, A2 = y
    k0 = p['dose'] / p['infusion_time'] if t <= p['infusion_time'] else 0
    dA1dt = k0 - p['k10'] * A1 - p['k12'] * A1 + p['k21'] * A2
    dA2dt = p['k12'] * A1 - p['k21'] * A2
    return [dA1dt, dA2dt]

# ====== Streamlit UI ======
st.set_page_config(page_title="PK Simulator", page_icon="ðŸ’Š")
st.title("Pharmacokinetic Model Simulator")

model_type = st.selectbox("Select a model", [
    "1-Compartment IV",
    "1-Compartment IV (Multiple Dosing)",
    "1-Compartment PO",
    "1-Compartment PO (Multiple Dosing)",
    "1-Compartment Infusion",
    "2-Compartment IV",
    "2-Compartment IV (Multiple Dosing)",
    "2-Compartment PO",
    "2-Compartment PO (Multiple Dosing)",
    "2-Compartment Infusion"
])

repeat = "Multiple Dosing" in model_type
infusion = "Infusion" in model_type
po = "PO" in model_type
iv = "IV" in model_type and not po and not infusion

dose = st.number_input("Dose per administration (mg)", value=500.0)
tau = st.number_input("Dosing interval Ï„ (hr)", value=8.0) if repeat else None
n_doses = st.number_input("Number of doses", value=10, step=1) if repeat else 1

# Add parameter inputs
if model_type.startswith("1-Compartment IV"):
    Vd = st.number_input("Volume of distribution (Vd, L)", value=20.0)
    kel = st.number_input("Elimination rate constant (kel, 1/hr)", value=0.2)
    params = {'dose': dose, 'kel': kel}
elif model_type.startswith("1-Compartment PO"):
    Vd = st.number_input("Volume of distribution (Vd, L)", value=20.0)
    ka = st.number_input("Absorption rate constant (ka, 1/hr)", value=1.0)
    kel = st.number_input("Elimination rate constant (kel, 1/hr)", value=0.2)
    params = {'dose': dose, 'ka': ka, 'kel': kel}
elif model_type.startswith("2-Compartment IV"):
    V1 = st.number_input("Central volume (V1, L)", value=15.0)
    k10 = st.number_input("k10 (1/hr)", value=0.15)
    k12 = st.number_input("k12 (1/hr)", value=0.1)
    k21 = st.number_input("k21 (1/hr)", value=0.05)
    params = {'dose': dose, 'k10': k10, 'k12': k12, 'k21': k21}
elif model_type.startswith("2-Compartment PO"):
    V1 = st.number_input("Central volume (V1, L)", value=15.0)
    ka = st.number_input("Absorption rate constant (ka, 1/hr)", value=1.2)
    k10 = st.number_input("k10 (1/hr)", value=0.15)
    k12 = st.number_input("k12 (1/hr)", value=0.1)
    k21 = st.number_input("k21 (1/hr)", value=0.05)
    params = {'dose': dose, 'ka': ka, 'k10': k10, 'k12': k12, 'k21': k21}
elif model_type == "1-Compartment Infusion":
    Vd = st.number_input("Volume of distribution (Vd, L)", value=20.0)
    kel = st.number_input("Elimination rate constant (kel, 1/hr)", value=0.2)
    infusion_time = st.number_input("Infusion duration (hr)", value=2.0)
    params = {'dose': dose, 'kel': kel, 'infusion_time': infusion_time}
elif model_type == "2-Compartment Infusion":
    V1 = st.number_input("Central volume (V1, L)", value=15.0)
    k10 = st.number_input("k10 (1/hr)", value=0.15)
    k12 = st.number_input("k12 (1/hr)", value=0.1)
    k21 = st.number_input("k21 (1/hr)", value=0.05)
    infusion_time = st.number_input("Infusion duration (hr)", value=2.0)
    params = {'dose': dose, 'k10': k10, 'k12': k12, 'k21': k21, 'infusion_time': infusion_time}

# Set duration
duration = tau * n_doses * 2 if repeat else 24

# Generate time vector
time = create_time_vector(duration)

# Placeholder for concentration
conc = np.zeros_like(time)

# Restore steady-state result section
if st.button("Plot Graph"):
    # This section assumes conc is computed prior to plotting
    AUC = simpson(conc, time)
    Cavg = AUC / (time[-1] - time[0])

    if repeat:
        last_start = int(len(time) - (2 * tau / (time[1] - time[0])))
        recent_conc = conc[last_start:]
        delta_c = np.abs(np.max(recent_conc) - np.min(recent_conc))
        ss_reached = delta_c / np.max(conc) < 0.05
        ss_text = 'ðŸŸ¢ Steady-state reached' if ss_reached else 'ðŸ”´ Not at steady-state'

        Css_max = np.max(recent_conc)
        Css_min = np.min(recent_conc)
        Css_avg = simpson(recent_conc, time[last_start:]) / (time[-1] - time[last_start])

        st.markdown(f"**Steady-state average concentration (Cavg):** {Css_avg:.2f} mg/L")
        st.markdown(f"**Steady-state maximum concentration (Cmax):** {Css_max:.2f} mg/L")
        st.markdown(f"**Steady-state minimum concentration (Cmin):** {Css_min:.2f} mg/L")
        st.markdown(f"**Total AUC (0â€“{duration:.1f} hr):** {AUC:.2f} mgÂ·hr/L")
        st.markdown(f"**Steady-state status:** {ss_text}")
    else:
        Cmax = np.max(conc)
        Tmax = time[np.argmax(conc)]
        Cmin = np.min(conc)
        st.markdown(f"**Cmax:** {Cmax:.2f} mg/L")
        st.markdown(f"**Tmax:** {Tmax:.2f} hr")
        st.markdown(f"**Cmin:** {Cmin:.2f} mg/L")
        st.markdown(f"**AUC (0â€“{duration:.1f} hr):** {AUC:.2f} mgÂ·hr/L")
        st.markdown(f"**Cavg:** {Cavg:.2f} mg/L")

