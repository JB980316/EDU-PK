# -*- coding: utf-8 -*-
"""KHU-PK/PD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sLOnXl2VWkkFmgOrI4wMYXwbJnM7nFLH
"""

import streamlit as st
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

st.set_page_config(layout="centered")
st.title("üíäKHU-PK/PD simulator")

# Î™®Îç∏ ÏÑ†ÌÉù
model = st.selectbox("Î™®Îç∏ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:", [
    "Emax Model",
    "1 Compartment IV & Emax model",
    "1 Compartment Infusion & Emax model",
    "1 Compartment PO & Emax model",
    "2 Compartment IV & Emax model",
    "2 Compartment Infusion & Emax model",
    "2 Compartment PO & Emax model"
])

# ÏãúÍ∞Ñ Ï†ïÏùò
t = np.linspace(0, 48, 500)

# Í≥µÌÜµ PD Î™®Îç∏
st.header("\U0001F9EA PD Parameters (Emax Model)")
col1, col2 = st.columns(2)
with col1:
    Emax = st.number_input("Emax", value=1.0, step=0.1)
with col2:
    EC50 = st.number_input("EC50", value=2.0, step=0.1)

def compute_emax(C):
    return Emax * C / (EC50 + C)

def plot_concentration_and_effect(t, C, E):
    fig, ax1 = plt.subplots()
    ax1.plot(t, C, 'b-', label='Concentration')
    ax1.set_xlabel('Time (hr)')
    ax1.set_ylabel('Concentration (mg/L)', color='b')
    ax1.tick_params('y', colors='b')
    ax2 = ax1.twinx()
    ax2.plot(t, E, 'r--', label='Effect')
    ax2.set_ylabel('Effect', color='r')
    ax2.tick_params('y', colors='r')
    fig.tight_layout()
    st.pyplot(fig)

if model == "Emax Model":
    C = np.linspace(0, 10, 200)
    E = compute_emax(C)
    fig, ax = plt.subplots()
    ax.plot(C, E, label="Effect vs Concentration")
    ax.axhline(Emax, color='gray', linestyle='--', label='Emax')
    ax.axvline(EC50, color='blue', linestyle='--', label='EC50')
    ax.set_xlabel('Concentration (mg/L)')
    ax.set_ylabel('Effect')
    ax.legend()
    st.pyplot(fig)

elif model == "1 Compartment IV & Emax model":
    st.header("PK Parameters")
    col1, col2 = st.columns(2)
    with col1:
        dose = st.number_input("IV Dose (mg)", value=100.0)
        ke = st.number_input("ke (/hr)", value=0.1, step=0.01)
    with col2:
        Vd = st.number_input("Vd (L)", value=10.0)

    def model_iv(y, t, ke):
        A = y[0]
        dAdt = -ke * A
        return [dAdt]

    y0 = [dose]
    A = odeint(model_iv, y0, t, args=(ke,))
    C = A[:, 0] / Vd
    E = compute_emax(C)
    plot_concentration_and_effect(t, C, E)

elif model == "1 Compartment Infusion & Emax model":
    st.header("PK Parameters")
    col1, col2 = st.columns(2)
    with col1:
        R = st.number_input("Infusion Rate (mg/hr)", value=10.0)
        duration = st.number_input("Infusion Duration (hr)", value=2.0, step=0.1)
    with col2:
        ke = st.number_input("ke (/hr)", value=0.1, step=0.01)
        Vd = st.number_input("Vd (L)", value=10.0)

    def model_infusion(y, t, R, ke, duration):
        A = y[0]
        infusion = R if t <= duration else 0
        dAdt = infusion - ke * A
        return [dAdt]

    y0 = [0.0]
    A = odeint(model_infusion, y0, t, args=(R, ke, duration))
    C = A[:, 0] / Vd
    E = compute_emax(C)
    plot_concentration_and_effect(t, C, E)

elif model == "1 Compartment PO & Emax model":
    st.header("PK Parameters")
    col1, col2 = st.columns(2)
    with col1:
        dose = st.number_input("Oral Dose (mg)", value=100.0)
        ka = st.number_input("ka (/hr)", value=1.0, step=0.1)
    with col2:
        ke = st.number_input("ke (/hr)", value=0.1, step=0.01)
        Vd = st.number_input("Vd (L)", value=10.0)

    def model_po(y, t, ka, ke, Vd):
        A, C = y
        dAdt = -ka * A
        dCdt = (ka * A / Vd) - ke * C
        return [dAdt, dCdt]

    y0 = [dose, 0.0]
    result = odeint(model_po, y0, t, args=(ka, ke, Vd))
    C = result[:, 1]
    E = compute_emax(C)
    plot_concentration_and_effect(t, C, E)

elif model == "2 Compartment IV & Emax model":
    st.header("PK Parameters")
    col1, col2 = st.columns(2)
    with col1:
        dose = st.number_input("IV Dose (mg)", value=100.0)
        k10 = st.number_input("k10 (/hr)", value=0.1, step=0.01)
        k12 = st.number_input("k12 (/hr)", value=0.05, step=0.01)
    with col2:
        k21 = st.number_input("k21 (/hr)", value=0.05, step=0.01)
        V1 = st.number_input("Central Volume V1 (L)", value=10.0)

    def model_2c_iv(y, t, k10, k12, k21):
        A1, A2 = y
        dA1dt = -k10*A1 - k12*A1 + k21*A2
        dA2dt = k12*A1 - k21*A2
        return [dA1dt, dA2dt]

    y0 = [dose, 0.0]
    result = odeint(model_2c_iv, y0, t, args=(k10, k12, k21))
    C = result[:, 0] / V1
    E = compute_emax(C)
    plot_concentration_and_effect(t, C, E)

elif model == "2 Compartment Infusion & Emax model":
    st.header("PK Parameters")
    col1, col2 = st.columns(2)
    with col1:
        R = st.number_input("Infusion Rate (mg/hr)", value=10.0)
        duration = st.number_input("Infusion Duration (hr)", value=2.0, step=0.1)
    with col2:
        k10 = st.number_input("k10 (/hr)", value=0.1, step=0.01)
        k12 = st.number_input("k12 (/hr)", value=0.05, step=0.01)
        k21 = st.number_input("k21 (/hr)", value=0.05, step=0.01)
        V1 = st.number_input("Central Volume V1 (L)", value=10.0)

    def model_2c_infusion(y, t, k10, k12, k21, R, duration):
        A1, A2 = y
        infusion = R if t <= duration else 0
        dA1dt = infusion - k10*A1 - k12*A1 + k21*A2
        dA2dt = k12*A1 - k21*A2
        return [dA1dt, dA2dt]

    y0 = [0.0, 0.0]
    result = odeint(model_2c_infusion, y0, t, args=(k10, k12, k21, R, duration))
    C = result[:, 0] / V1
    E = compute_emax(C)
    plot_concentration_and_effect(t, C, E)

elif model == "2 Compartment PO & Emax model":
    st.header("PK Parameters")
    col1, col2 = st.columns(2)
    with col1:
        dose = st.number_input("Oral Dose (mg)", value=100.0)
        ka = st.number_input("ka (/hr)", value=1.0, step=0.1)
        k10 = st.number_input("k10 (/hr)", value=0.1, step=0.01)
    with col2:
        k12 = st.number_input("k12 (/hr)", value=0.05, step=0.01)
        k21 = st.number_input("k21 (/hr)", value=0.05, step=0.01)
        V1 = st.number_input("Central Volume V1 (L)", value=10.0)

    def model_2c_po(y, t, ka, k10, k12, k21):
        Ag, A1, A2 = y
        dAgdt = -ka * Ag
        dA1dt = ka * Ag - k10*A1 - k12*A1 + k21*A2
        dA2dt = k12*A1 - k21*A2
        return [dAgdt, dA1dt, dA2dt]

    y0 = [dose, 0.0, 0.0]
    result = odeint(model_2c_po, y0, t, args=(ka, k10, k12, k21))
    C = result[:, 1] / V1
    E = compute_emax(C)
    plot_concentration_and_effect(t, C, E)